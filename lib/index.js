class saiposNumberCipher {

  /**
   * Class to encrypt / decrypt numbers based on a provided dictionary
   * @param {string} dictionary Sequence of 10 unique characters dictionary (1 for each number 0-9)
   */
  constructor(dictionary) {
    if ((new Set(dictionary)).size !== 10) {
      throw new Error('Dictionary must be a 10 unique characters sequence!')
    }

    this.dictionary = dictionary
  }

  /**
   * Encrypts an absolute integer number by the provided dictionary
   * @param {integer} number2Encrypt Absolute integer number
   */
  encrypt(number2Encrypt) {
    if (typeof number2Encrypt !== 'number') {
      throw new Error(`${number2Encrypt} must be a number!`)
    }

    return Array.from(number2Encrypt.toString()).map(number => this.dictionary[number] || '').join('')
  }

  /**
   * Decrypts an encrypted cipher which was previously generated by this lib
   * @param {string} encryptedCipher
   * @returns {number} Decrypted number
   */
  decrypt(encryptedCipher) {
    return +(Array.from(encryptedCipher).map(char => this.dictionary.indexOf(char)).join(''))
  }
  
}

module.exports = saiposNumberCipher
